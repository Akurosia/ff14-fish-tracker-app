{"version":3,"file":"dateFns.min.js","sources":["../../../../../node_modules/date-fns/esm/_lib/toInteger/index.js","../../../../../node_modules/date-fns/esm/_lib/requiredArgs/index.js","../../../../../node_modules/date-fns/esm/toDate/index.js","../../../../../node_modules/date-fns/esm/addDays/index.js","../../../../../node_modules/date-fns/esm/addMonths/index.js","../../../../../node_modules/date-fns/esm/add/index.js","../../../../../node_modules/date-fns/esm/addMilliseconds/index.js","../../../../../node_modules/date-fns/esm/addHours/index.js","../../../../../node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","../../../../../node_modules/date-fns/esm/startOfDay/index.js","../../../../../node_modules/date-fns/esm/differenceInCalendarDays/index.js","../../../../../node_modules/date-fns/esm/addMinutes/index.js","../../../../../node_modules/date-fns/esm/addSeconds/index.js","../../../../../node_modules/date-fns/esm/areIntervalsOverlapping/index.js","../../../../../node_modules/date-fns/esm/compareAsc/index.js","../../../../../node_modules/date-fns/esm/constants/index.js","../../../../../node_modules/date-fns/esm/isDate/index.js","../../../../../node_modules/date-fns/esm/isValid/index.js","../../../../../node_modules/date-fns/esm/differenceInCalendarMonths/index.js","../../../../../node_modules/date-fns/esm/differenceInCalendarYears/index.js","../../../../../node_modules/date-fns/esm/differenceInDays/index.js","../../../../../node_modules/date-fns/esm/differenceInMilliseconds/index.js","../../../../../node_modules/date-fns/esm/_lib/roundingMethods/index.js","../../../../../node_modules/date-fns/esm/differenceInHours/index.js","../../../../../node_modules/date-fns/esm/differenceInMinutes/index.js","../../../../../node_modules/date-fns/esm/endOfDay/index.js","../../../../../node_modules/date-fns/esm/endOfMonth/index.js","../../../../../node_modules/date-fns/esm/isLastDayOfMonth/index.js","../../../../../node_modules/date-fns/esm/differenceInMonths/index.js","../../../../../node_modules/date-fns/esm/differenceInSeconds/index.js","../../../../../node_modules/date-fns/esm/differenceInYears/index.js","../../../../../node_modules/date-fns/esm/startOfMinute/index.js","../../../../../node_modules/date-fns/esm/startOfYear/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","../../../../../node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","../../../../../node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","../../../../../node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","../../../../../node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","../../../../../node_modules/date-fns/esm/locale/en-US/index.js","../../../../../node_modules/date-fns/esm/subMilliseconds/index.js","../../../../../node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","../../../../../node_modules/date-fns/esm/_lib/format/lightFormatters/index.js","../../../../../node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js","../../../../../node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js","../../../../../node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js","../../../../../node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js","../../../../../node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js","../../../../../node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js","../../../../../node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js","../../../../../node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js","../../../../../node_modules/date-fns/esm/_lib/getUTCWeek/index.js","../../../../../node_modules/date-fns/esm/_lib/format/formatters/index.js","../../../../../node_modules/date-fns/esm/_lib/format/longFormatters/index.js","../../../../../node_modules/date-fns/esm/_lib/protectedTokens/index.js","../../../../../node_modules/date-fns/esm/format/index.js","../../../../../node_modules/date-fns/esm/_lib/cloneObject/index.js","../../../../../node_modules/date-fns/esm/_lib/assign/index.js","../../../../../node_modules/date-fns/esm/formatDistanceStrict/index.js","../../../../../node_modules/date-fns/esm/formatDuration/index.js","../../../../../node_modules/date-fns/esm/subDays/index.js","../../../../../node_modules/date-fns/esm/subMonths/index.js","../../../../../node_modules/date-fns/esm/sub/index.js","../../../../../node_modules/date-fns/esm/milliseconds/index.js","../../../../../node_modules/date-fns/esm/subHours/index.js","../../../../../node_modules/date-fns/_lib/toInteger/index.js","../../../../../node_modules/date-fns/_lib/requiredArgs/index.js","../../../../../node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds/index.js","../../../../../src/dateFns/utc/index.js","../../../../../node_modules/date-fns/esm/subMinutes/index.js","../../../../../node_modules/date-fns/esm/subSeconds/index.js","../../../../../src/main.js","../../../../../node_modules/date-fns/esm/eachMinuteOfInterval/index.js","../../../../../node_modules/date-fns/esm/formatISO/index.js","../../../../../node_modules/date-fns/esm/formatRelative/index.js","../../../../../node_modules/date-fns/esm/getDayOfYear/index.js","../../../../../node_modules/date-fns/esm/getHours/index.js","../../../../../node_modules/date-fns/esm/intervalToDuration/index.js","../../../../../node_modules/date-fns/esm/isAfter/index.js","../../../../../node_modules/date-fns/esm/isBefore/index.js","../../../../../node_modules/date-fns/esm/isEqual/index.js","../../../../../node_modules/date-fns/esm/isWithinInterval/index.js","../../../../../node_modules/date-fns/esm/setHours/index.js","../../../../../node_modules/date-fns/esm/startOfHour/index.js"],"sourcesContent":["export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import addDays from \"../addDays/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n *\n * | Key            | Description                        |\n * |----------------|------------------------------------|\n * | years          | Amount of years to be added        |\n * | months         | Amount of months to be added       |\n * | weeks          | Amount of weeks to be added        |\n * | days           | Amount of days to be added         |\n * | hours          | Amount of hours to be added        |\n * | minutes        | Amount of minutes to be added      |\n * | seconds        | Amount of seconds to be added      |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport default function add(dirtyDate, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Add years and months\n\n  var date = toDate(dirtyDate);\n  var dateWithMonths = months || years ? addMonths(date, months + years * 12) : date; // Add weeks and days\n\n  var dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths; // Add days, hours, minutes and seconds\n\n  var minutesToAdd = minutes + hours * 60;\n  var secondsToAdd = seconds + minutesToAdd * 60;\n  var msToAdd = secondsToAdd * 1000;\n  var finalDate = new Date(dateWithDays.getTime() + msToAdd);\n  return finalDate;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\n\nexport default function addHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_HOUR);\n}","/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport default function getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport startOfDay from \"../startOfDay/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000;\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar days\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\n\nexport default function differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var startOfDayLeft = startOfDay(dirtyDateLeft);\n  var startOfDayRight = startOfDay(dirtyDateRight);\n  var timestampLeft = startOfDayLeft.getTime() - getTimezoneOffsetInMilliseconds(startOfDayLeft);\n  var timestampRight = startOfDayRight.getTime() - getTimezoneOffsetInMilliseconds(startOfDayRight); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a day is not constant\n  // (e.g. it's different in the day of the daylight saving time clock shift)\n\n  return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 60000;\n/**\n * @name addMinutes\n * @category Minute Helpers\n * @summary Add the specified number of minutes to the given date.\n *\n * @description\n * Add the specified number of minutes to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 minutes to 10 July 2014 12:00:00:\n * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 12:30:00\n */\n\nexport default function addMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * MILLISECONDS_IN_MINUTE);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\n\nexport default function addSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, amount * 1000);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name areIntervalsOverlapping\n * @category Interval Helpers\n * @summary Is the given time interval overlapping with another time interval?\n *\n * @description\n * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `areRangesOverlapping` to `areIntervalsOverlapping`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   areRangesOverlapping(\n *     new Date(2014, 0, 10), new Date(2014, 0, 20),\n *     new Date(2014, 0, 17), new Date(2014, 0, 21)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   areIntervalsOverlapping(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *     { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n *   )\n *   ```\n *\n * @param {Interval} intervalLeft - the first interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Interval} intervalRight - the second interval to compare. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - the object with options\n * @param {Boolean} [options.inclusive=false] - whether the comparison is inclusive or not\n * @returns {Boolean} whether the time intervals are overlapping\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }\n * )\n * //=> true\n *\n * @example\n * // For non-overlapping time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }\n * )\n * //=> false\n *\n * @example\n * // For adjacent time intervals:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }\n * )\n * //=> false\n *\n * @example\n * // Using the inclusive option:\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }\n * )\n * //=> false\n * areIntervalsOverlapping(\n *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },\n *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },\n *   { inclusive: true }\n * )\n * //=> true\n */\n\nexport default function areIntervalsOverlapping(dirtyIntervalLeft, dirtyIntervalRight) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    inclusive: false\n  };\n  requiredArgs(2, arguments);\n  var intervalLeft = dirtyIntervalLeft || {};\n  var intervalRight = dirtyIntervalRight || {};\n  var leftStartTime = toDate(intervalLeft.start).getTime();\n  var leftEndTime = toDate(intervalLeft.end).getTime();\n  var rightStartTime = toDate(intervalRight.start).getTime();\n  var rightEndTime = toDate(intervalRight.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(leftStartTime <= leftEndTime && rightStartTime <= rightEndTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  if (options.inclusive) {\n    return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;\n  }\n\n  return leftStartTime < rightEndTime && rightStartTime < leftEndTime;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","/**\n * Days in 1 week.\n *\n * @name daysInWeek\n * @constant\n * @type {number}\n * @default\n */\nexport var daysInWeek = 7;\n/**\n * Maximum allowed time.\n *\n * @name maxTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n/**\n * Milliseconds in 1 minute\n *\n * @name millisecondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInMinute = 60000;\n/**\n * Milliseconds in 1 hour\n *\n * @name millisecondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInHour = 3600000;\n/**\n * Milliseconds in 1 second\n *\n * @name millisecondsInSecond\n * @constant\n * @type {number}\n * @default\n */\n\nexport var millisecondsInSecond = 1000;\n/**\n * Minimum allowed time.\n *\n * @name minTime\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minTime = -maxTime;\n/**\n * Minutes in 1 hour\n *\n * @name minutesInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var minutesInHour = 60;\n/**\n * Months in 1 quarter\n *\n * @name monthsInQuarter\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInQuarter = 3;\n/**\n * Months in 1 year\n *\n * @name monthsInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var monthsInYear = 12;\n/**\n * Quarters in 1 year\n *\n * @name quartersInYear\n * @constant\n * @type {number}\n * @default\n */\n\nexport var quartersInYear = 4;\n/**\n * Seconds in 1 hour\n *\n * @name secondsInHour\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInHour = 3600;\n/**\n * Seconds in 1 minute\n *\n * @name secondsInMinute\n * @constant\n * @type {number}\n * @default\n */\n\nexport var secondsInMinute = 60;","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isDate\n * @category Common Helpers\n * @summary Is the given value a date?\n *\n * @description\n * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {*} value - the value to check\n * @returns {boolean} true if the given value is a date\n * @throws {TypeError} 1 arguments required\n *\n * @example\n * // For a valid date:\n * const result = isDate(new Date())\n * //=> true\n *\n * @example\n * // For an invalid date:\n * const result = isDate(new Date(NaN))\n * //=> true\n *\n * @example\n * // For some value:\n * const result = isDate('2014-02-31')\n * //=> false\n *\n * @example\n * // For an object:\n * const result = isDate({})\n * //=> false\n */\n\nexport default function isDate(value) {\n  requiredArgs(1, arguments);\n  return value instanceof Date || typeof value === 'object' && Object.prototype.toString.call(value) === '[object Date]';\n}","import isDate from \"../isDate/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * const result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * const result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * const result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n\n  if (!isDate(dirtyDate) && typeof dirtyDate !== 'number') {\n    return false;\n  }\n\n  var date = toDate(dirtyDate);\n  return !isNaN(Number(date));\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * )\n * //=> 2\n */\n\nexport default function differenceInCalendarYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getFullYear() - dateRight.getFullYear();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\n\nfunction compareLocalAsc(dateLeft, dateRight) {\n  var diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.floor(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full days according to the local timezone\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n//=> 92\n */\n\n\nexport default function differenceInDays(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareLocalAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarDays(dateLeft, dateRight));\n  dateLeft.setDate(dateLeft.getDate() - sign * difference); // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastDayNotFull = Number(compareLocalAsc(dateLeft, dateRight) === -sign);\n  var result = sign * (difference - isLastDayNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dateLeft, dateRight) {\n  requiredArgs(2, arguments);\n  return toDate(dateLeft).getTime() - toDate(dateRight).getTime();\n}","var roundingMap = {\n  ceil: Math.ceil,\n  round: Math.round,\n  floor: Math.floor,\n  trunc: function (value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n  } // Math.trunc is not supported by IE\n\n};\nvar defaultRoundingMethod = 'trunc';\nexport function getRoundingMethod(method) {\n  return method ? roundingMap[method] : roundingMap[defaultRoundingMethod];\n}","import { millisecondsInHour } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of hours\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\n\nexport default function differenceInHours(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInHour;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import { millisecondsInMinute } from \"../constants/index.js\";\nimport differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of minutes\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\n\nexport default function differenceInMinutes(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\n\nexport default function endOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the end of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\n\nexport default function endOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var month = date.getMonth();\n  date.setFullYear(date.getFullYear(), month + 1, 0);\n  date.setHours(23, 59, 59, 999);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport endOfDay from \"../endOfDay/index.js\";\nimport endOfMonth from \"../endOfMonth/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is the last day of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * var result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\n\nexport default function isLastDayOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return endOfDay(date).getTime() === endOfMonth(date).getTime();\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarMonths from \"../differenceInCalendarMonths/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport isLastDayOfMonth from \"../isLastDayOfMonth/index.js\";\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  var result; // Check for the difference of less than month\n\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (dateLeft.getMonth() === 1 && dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      dateLeft.setDate(30);\n    }\n\n    dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n\n    var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign; // Check for cases of one full calendar month\n\n    if (isLastDayOfMonth(toDate(dirtyDateLeft)) && difference === 1 && compareAsc(dirtyDateLeft, dateRight) === 1) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  } // Prevent negative zero\n\n\n  return result === 0 ? 0 : result;\n}","import differenceInMilliseconds from \"../differenceInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport { getRoundingMethod } from \"../_lib/roundingMethods/index.js\";\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @param {Object} [options] - an object with options.\n * @param {String} [options.roundingMethod='trunc'] - a rounding method (`ceil`, `floor`, `round` or `trunc`)\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dateLeft, dateRight, options) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options === null || options === void 0 ? void 0 : options.roundingMethod)(diff);\n}","import toDate from \"../toDate/index.js\";\nimport differenceInCalendarYears from \"../differenceInCalendarYears/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full years\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\n\nexport default function differenceInYears(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarYears(dateLeft, dateRight)); // Set both dates to a valid leap year for accurate comparison when dealing\n  // with leap days\n\n  dateLeft.setFullYear(1584);\n  dateRight.setFullYear(1584); // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastYearNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - Number(isLastYearNotFull)); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfMinute\n * @category Minute Helpers\n * @summary Return the start of a minute for the given date.\n *\n * @description\n * Return the start of a minute for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a minute\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a minute for 1 December 2014 22:15:45.400:\n * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))\n * //=> Mon Dec 01 2014 22:15:00\n */\n\nexport default function startOfMinute(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setSeconds(0, 0);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfYear\n * @category Year Helpers\n * @summary Return the start of a year for the given date.\n *\n * @description\n * Return the start of a year for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a year for 2 September 2014 11:55:00:\n * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))\n * //=> Wed Jan 01 2014 00:00:00\n */\n\nexport default function startOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var cleanDate = toDate(dirtyDate);\n  var date = new Date(0);\n  date.setFullYear(cleanDate.getFullYear(), 0, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\n\nvar formatDistance = function (token, count, options) {\n  var result;\n  var tokenValue = formatDistanceLocale[token];\n\n  if (typeof tokenValue === 'string') {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace('{{count}}', count.toString());\n  }\n\n  if (options !== null && options !== void 0 && options.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n};\n\nexport default formatDistance;","export default function buildFormatLongFn(args) {\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // TODO: Remove String()\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from \"../../../_lib/buildFormatLongFn/index.js\";\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\n\nvar formatRelative = function (token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n};\n\nexport default formatRelative;","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!\n\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from \"../../../_lib/buildLocalizeFn/index.js\";\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']\n}; // Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\n\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nvar ordinalNumber = function (dirtyNumber, _options) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n};\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return quarter - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    }) : findKey(parsePatterns, function (pattern) {\n      return pattern.test(matchedString);\n    });\n    var value;\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n\n  return undefined;\n}","import buildMatchFn from \"../../../_lib/buildMatchFn/index.js\";\nimport buildMatchPatternFn from \"../../../_lib/buildMatchPatternFn/index.js\";\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","export default function buildMatchPatternFn(args) {\n  return function (string) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    var rest = string.slice(matchedString.length);\n    return {\n      value: value,\n      rest: rest\n    };\n  };\n}","import formatDistance from \"./_lib/formatDistance/index.js\";\nimport formatLong from \"./_lib/formatLong/index.js\";\nimport formatRelative from \"./_lib/formatRelative/index.js\";\nimport localize from \"./_lib/localize/index.js\";\nimport match from \"./_lib/match/index.js\";\n\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMilliseconds from \"../addMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import addLeadingZeros from \"../../addLeadingZeros/index.js\";\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* |                                |\n * |  d  | Day of month                   |  D  |                                |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  m  | Minute                         |  M  | Month                          |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  y  | Year (abs)                     |  Y  |                                |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n */\n\nvar formatters = {\n  // Year\n  y: function (date, token) {\n    // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens\n    // | Year     |     y | yy |   yyy |  yyyy | yyyyy |\n    // |----------|-------|----|-------|-------|-------|\n    // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |\n    // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |\n    // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |\n    // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |\n    // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |\n    var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var year = signedYear > 0 ? signedYear : 1 - signedYear;\n    return addLeadingZeros(token === 'yy' ? year % 100 : year, token.length);\n  },\n  // Month\n  M: function (date, token) {\n    var month = date.getUTCMonth();\n    return token === 'M' ? String(month + 1) : addLeadingZeros(month + 1, 2);\n  },\n  // Day of the month\n  d: function (date, token) {\n    return addLeadingZeros(date.getUTCDate(), token.length);\n  },\n  // AM or PM\n  a: function (date, token) {\n    var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return dayPeriodEnumValue.toUpperCase();\n\n      case 'aaa':\n        return dayPeriodEnumValue;\n\n      case 'aaaaa':\n        return dayPeriodEnumValue[0];\n\n      case 'aaaa':\n      default:\n        return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token) {\n    return addLeadingZeros(date.getUTCHours() % 12 || 12, token.length);\n  },\n  // Hour [0-23]\n  H: function (date, token) {\n    return addLeadingZeros(date.getUTCHours(), token.length);\n  },\n  // Minute\n  m: function (date, token) {\n    return addLeadingZeros(date.getUTCMinutes(), token.length);\n  },\n  // Second\n  s: function (date, token) {\n    return addLeadingZeros(date.getUTCSeconds(), token.length);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    var numberOfDigits = token.length;\n    var milliseconds = date.getUTCMilliseconds();\n    var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));\n    return addLeadingZeros(fractionalSeconds, token.length);\n  }\n};\nexport default formatters;","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  date.setUTCMonth(0, 1);\n  date.setUTCHours(0, 0, 0, 0);\n  var startOfYearTimestamp = date.getTime();\n  var difference = timestamp - startOfYearTimestamp;\n  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;\n}","import toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var weekStartsOn = 1;\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var year = date.getUTCFullYear();\n  var fourthOfJanuaryOfNextYear = new Date(0);\n  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);\n  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);\n  var fourthOfJanuaryOfThisYear = new Date(0);\n  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);\n  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import getUTCISOWeekYear from \"../getUTCISOWeekYear/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCISOWeekYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var year = getUTCISOWeekYear(dirtyDate);\n  var fourthOfJanuary = new Date(0);\n  fourthOfJanuary.setUTCFullYear(year, 0, 4);\n  fourthOfJanuary.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCISOWeek(fourthOfJanuary);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCISOWeek from \"../startOfUTCISOWeek/index.js\";\nimport startOfUTCISOWeekYear from \"../startOfUTCISOWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCISOWeek(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeek(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  var date = toDate(dirtyDate);\n  var day = date.getUTCDay();\n  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;\n  date.setUTCDate(date.getUTCDate() - diff);\n  date.setUTCHours(0, 0, 0, 0);\n  return date;\n}","import toInteger from \"../toInteger/index.js\";\nimport toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate, dirtyOptions);\n  var year = date.getUTCFullYear();\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var firstWeekOfNextYear = new Date(0);\n  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);\n  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);\n  var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);\n  var firstWeekOfThisYear = new Date(0);\n  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);\n  var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);\n\n  if (date.getTime() >= startOfNextYear.getTime()) {\n    return year + 1;\n  } else if (date.getTime() >= startOfThisYear.getTime()) {\n    return year;\n  } else {\n    return year - 1;\n  }\n}","import toInteger from \"../toInteger/index.js\";\nimport getUTCWeekYear from \"../getUTCWeekYear/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\"; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function startOfUTCWeekYear(dirtyDate, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale;\n  var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);\n  var year = getUTCWeekYear(dirtyDate, dirtyOptions);\n  var firstWeek = new Date(0);\n  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);\n  firstWeek.setUTCHours(0, 0, 0, 0);\n  var date = startOfUTCWeek(firstWeek, dirtyOptions);\n  return date;\n}","import toDate from \"../../toDate/index.js\";\nimport startOfUTCWeek from \"../startOfUTCWeek/index.js\";\nimport startOfUTCWeekYear from \"../startOfUTCWeekYear/index.js\";\nimport requiredArgs from \"../requiredArgs/index.js\";\nvar MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.\n// See issue: https://github.com/date-fns/date-fns/issues/376\n\nexport default function getUTCWeek(dirtyDate, options) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer\n  // because the number of milliseconds in a week is not constant\n  // (e.g. it's different in the week of the daylight saving time clock shift)\n\n  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;\n}","import lightFormatters from \"../lightFormatters/index.js\";\nimport getUTCDayOfYear from \"../../../_lib/getUTCDayOfYear/index.js\";\nimport getUTCISOWeek from \"../../../_lib/getUTCISOWeek/index.js\";\nimport getUTCISOWeekYear from \"../../../_lib/getUTCISOWeekYear/index.js\";\nimport getUTCWeek from \"../../../_lib/getUTCWeek/index.js\";\nimport getUTCWeekYear from \"../../../_lib/getUTCWeekYear/index.js\";\nimport addLeadingZeros from \"../../addLeadingZeros/index.js\";\nvar dayPeriodEnum = {\n  am: 'am',\n  pm: 'pm',\n  midnight: 'midnight',\n  noon: 'noon',\n  morning: 'morning',\n  afternoon: 'afternoon',\n  evening: 'evening',\n  night: 'night'\n};\n/*\n * |     | Unit                           |     | Unit                           |\n * |-----|--------------------------------|-----|--------------------------------|\n * |  a  | AM, PM                         |  A* | Milliseconds in day            |\n * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |\n * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |\n * |  d  | Day of month                   |  D  | Day of year                    |\n * |  e  | Local day of week              |  E  | Day of week                    |\n * |  f  |                                |  F* | Day of week in month           |\n * |  g* | Modified Julian day            |  G  | Era                            |\n * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |\n * |  i! | ISO day of week                |  I! | ISO week of year               |\n * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |\n * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |\n * |  l* | (deprecated)                   |  L  | Stand-alone month              |\n * |  m  | Minute                         |  M  | Month                          |\n * |  n  |                                |  N  |                                |\n * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |\n * |  p! | Long localized time            |  P! | Long localized date            |\n * |  q  | Stand-alone quarter            |  Q  | Quarter                        |\n * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |\n * |  s  | Second                         |  S  | Fraction of second             |\n * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |\n * |  u  | Extended year                  |  U* | Cyclic year                    |\n * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |\n * |  w  | Local week of year             |  W* | Week of month                  |\n * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |\n * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |\n * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |\n *\n * Letters marked by * are not implemented but reserved by Unicode standard.\n *\n * Letters marked by ! are non-standard, but implemented by date-fns:\n * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)\n * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,\n *   i.e. 7 for Sunday, 1 for Monday, etc.\n * - `I` is ISO week of year, as opposed to `w` which is local week of year.\n * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.\n *   `R` is supposed to be used in conjunction with `I` and `i`\n *   for universal ISO week-numbering date, whereas\n *   `Y` is supposed to be used in conjunction with `w` and `e`\n *   for week-numbering date specific to the locale.\n * - `P` is long localized date format\n * - `p` is long localized time format\n */\n\nvar formatters = {\n  // Era\n  G: function (date, token, localize) {\n    var era = date.getUTCFullYear() > 0 ? 1 : 0;\n\n    switch (token) {\n      // AD, BC\n      case 'G':\n      case 'GG':\n      case 'GGG':\n        return localize.era(era, {\n          width: 'abbreviated'\n        });\n      // A, B\n\n      case 'GGGGG':\n        return localize.era(era, {\n          width: 'narrow'\n        });\n      // Anno Domini, Before Christ\n\n      case 'GGGG':\n      default:\n        return localize.era(era, {\n          width: 'wide'\n        });\n    }\n  },\n  // Year\n  y: function (date, token, localize) {\n    // Ordinal number\n    if (token === 'yo') {\n      var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n      var year = signedYear > 0 ? signedYear : 1 - signedYear;\n      return localize.ordinalNumber(year, {\n        unit: 'year'\n      });\n    }\n\n    return lightFormatters.y(date, token);\n  },\n  // Local week-numbering year\n  Y: function (date, token, localize, options) {\n    var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)\n\n    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year\n\n    if (token === 'YY') {\n      var twoDigitYear = weekYear % 100;\n      return addLeadingZeros(twoDigitYear, 2);\n    } // Ordinal number\n\n\n    if (token === 'Yo') {\n      return localize.ordinalNumber(weekYear, {\n        unit: 'year'\n      });\n    } // Padding\n\n\n    return addLeadingZeros(weekYear, token.length);\n  },\n  // ISO week-numbering year\n  R: function (date, token) {\n    var isoWeekYear = getUTCISOWeekYear(date); // Padding\n\n    return addLeadingZeros(isoWeekYear, token.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function (date, token) {\n    var year = date.getUTCFullYear();\n    return addLeadingZeros(year, token.length);\n  },\n  // Quarter\n  Q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'Q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'QQ':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'Qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'QQQ':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'QQQQQ':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'QQQQ':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function (date, token, localize) {\n    var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);\n\n    switch (token) {\n      // 1, 2, 3, 4\n      case 'q':\n        return String(quarter);\n      // 01, 02, 03, 04\n\n      case 'qq':\n        return addLeadingZeros(quarter, 2);\n      // 1st, 2nd, 3rd, 4th\n\n      case 'qo':\n        return localize.ordinalNumber(quarter, {\n          unit: 'quarter'\n        });\n      // Q1, Q2, Q3, Q4\n\n      case 'qqq':\n        return localize.quarter(quarter, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n\n      case 'qqqqq':\n        return localize.quarter(quarter, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // 1st quarter, 2nd quarter, ...\n\n      case 'qqqq':\n      default:\n        return localize.quarter(quarter, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Month\n  M: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      case 'M':\n      case 'MM':\n        return lightFormatters.M(date, token);\n      // 1st, 2nd, ..., 12th\n\n      case 'Mo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'MMM':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // J, F, ..., D\n\n      case 'MMMMM':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // January, February, ..., December\n\n      case 'MMMM':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone month\n  L: function (date, token, localize) {\n    var month = date.getUTCMonth();\n\n    switch (token) {\n      // 1, 2, ..., 12\n      case 'L':\n        return String(month + 1);\n      // 01, 02, ..., 12\n\n      case 'LL':\n        return addLeadingZeros(month + 1, 2);\n      // 1st, 2nd, ..., 12th\n\n      case 'Lo':\n        return localize.ordinalNumber(month + 1, {\n          unit: 'month'\n        });\n      // Jan, Feb, ..., Dec\n\n      case 'LLL':\n        return localize.month(month, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // J, F, ..., D\n\n      case 'LLLLL':\n        return localize.month(month, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // January, February, ..., December\n\n      case 'LLLL':\n      default:\n        return localize.month(month, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // Local week of year\n  w: function (date, token, localize, options) {\n    var week = getUTCWeek(date, options);\n\n    if (token === 'wo') {\n      return localize.ordinalNumber(week, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(week, token.length);\n  },\n  // ISO week of year\n  I: function (date, token, localize) {\n    var isoWeek = getUTCISOWeek(date);\n\n    if (token === 'Io') {\n      return localize.ordinalNumber(isoWeek, {\n        unit: 'week'\n      });\n    }\n\n    return addLeadingZeros(isoWeek, token.length);\n  },\n  // Day of the month\n  d: function (date, token, localize) {\n    if (token === 'do') {\n      return localize.ordinalNumber(date.getUTCDate(), {\n        unit: 'date'\n      });\n    }\n\n    return lightFormatters.d(date, token);\n  },\n  // Day of year\n  D: function (date, token, localize) {\n    var dayOfYear = getUTCDayOfYear(date);\n\n    if (token === 'Do') {\n      return localize.ordinalNumber(dayOfYear, {\n        unit: 'dayOfYear'\n      });\n    }\n\n    return addLeadingZeros(dayOfYear, token.length);\n  },\n  // Day of week\n  E: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n\n    switch (token) {\n      // Tue\n      case 'E':\n      case 'EE':\n      case 'EEE':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'EEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'EEEEEE':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'EEEE':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Local day of week\n  e: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case 'e':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'ee':\n        return addLeadingZeros(localDayOfWeek, 2);\n      // 1st, 2nd, ..., 7th\n\n      case 'eo':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'eee':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'eeeee':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'eeeeee':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'eeee':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function (date, token, localize, options) {\n    var dayOfWeek = date.getUTCDay();\n    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;\n\n    switch (token) {\n      // Numerical value (same as in `e`)\n      case 'c':\n        return String(localDayOfWeek);\n      // Padded numerical value\n\n      case 'cc':\n        return addLeadingZeros(localDayOfWeek, token.length);\n      // 1st, 2nd, ..., 7th\n\n      case 'co':\n        return localize.ordinalNumber(localDayOfWeek, {\n          unit: 'day'\n        });\n\n      case 'ccc':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'standalone'\n        });\n      // T\n\n      case 'ccccc':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'standalone'\n        });\n      // Tu\n\n      case 'cccccc':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'standalone'\n        });\n      // Tuesday\n\n      case 'cccc':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'standalone'\n        });\n    }\n  },\n  // ISO day of week\n  i: function (date, token, localize) {\n    var dayOfWeek = date.getUTCDay();\n    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;\n\n    switch (token) {\n      // 2\n      case 'i':\n        return String(isoDayOfWeek);\n      // 02\n\n      case 'ii':\n        return addLeadingZeros(isoDayOfWeek, token.length);\n      // 2nd\n\n      case 'io':\n        return localize.ordinalNumber(isoDayOfWeek, {\n          unit: 'day'\n        });\n      // Tue\n\n      case 'iii':\n        return localize.day(dayOfWeek, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n      // T\n\n      case 'iiiii':\n        return localize.day(dayOfWeek, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n      // Tu\n\n      case 'iiiiii':\n        return localize.day(dayOfWeek, {\n          width: 'short',\n          context: 'formatting'\n        });\n      // Tuesday\n\n      case 'iiii':\n      default:\n        return localize.day(dayOfWeek, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM or PM\n  a: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n\n    switch (token) {\n      case 'a':\n      case 'aa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'aaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'aaaaa':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'aaaa':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours === 12) {\n      dayPeriodEnumValue = dayPeriodEnum.noon;\n    } else if (hours === 0) {\n      dayPeriodEnumValue = dayPeriodEnum.midnight;\n    } else {\n      dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';\n    }\n\n    switch (token) {\n      case 'b':\n      case 'bb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'bbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        }).toLowerCase();\n\n      case 'bbbbb':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'bbbb':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    var dayPeriodEnumValue;\n\n    if (hours >= 17) {\n      dayPeriodEnumValue = dayPeriodEnum.evening;\n    } else if (hours >= 12) {\n      dayPeriodEnumValue = dayPeriodEnum.afternoon;\n    } else if (hours >= 4) {\n      dayPeriodEnumValue = dayPeriodEnum.morning;\n    } else {\n      dayPeriodEnumValue = dayPeriodEnum.night;\n    }\n\n    switch (token) {\n      case 'B':\n      case 'BB':\n      case 'BBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'abbreviated',\n          context: 'formatting'\n        });\n\n      case 'BBBBB':\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'narrow',\n          context: 'formatting'\n        });\n\n      case 'BBBB':\n      default:\n        return localize.dayPeriod(dayPeriodEnumValue, {\n          width: 'wide',\n          context: 'formatting'\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function (date, token, localize) {\n    if (token === 'ho') {\n      var hours = date.getUTCHours() % 12;\n      if (hours === 0) hours = 12;\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.h(date, token);\n  },\n  // Hour [0-23]\n  H: function (date, token, localize) {\n    if (token === 'Ho') {\n      return localize.ordinalNumber(date.getUTCHours(), {\n        unit: 'hour'\n      });\n    }\n\n    return lightFormatters.H(date, token);\n  },\n  // Hour [0-11]\n  K: function (date, token, localize) {\n    var hours = date.getUTCHours() % 12;\n\n    if (token === 'Ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Hour [1-24]\n  k: function (date, token, localize) {\n    var hours = date.getUTCHours();\n    if (hours === 0) hours = 24;\n\n    if (token === 'ko') {\n      return localize.ordinalNumber(hours, {\n        unit: 'hour'\n      });\n    }\n\n    return addLeadingZeros(hours, token.length);\n  },\n  // Minute\n  m: function (date, token, localize) {\n    if (token === 'mo') {\n      return localize.ordinalNumber(date.getUTCMinutes(), {\n        unit: 'minute'\n      });\n    }\n\n    return lightFormatters.m(date, token);\n  },\n  // Second\n  s: function (date, token, localize) {\n    if (token === 'so') {\n      return localize.ordinalNumber(date.getUTCSeconds(), {\n        unit: 'second'\n      });\n    }\n\n    return lightFormatters.s(date, token);\n  },\n  // Fraction of second\n  S: function (date, token) {\n    return lightFormatters.S(date, token);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)\n  X: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    if (timezoneOffset === 0) {\n      return 'Z';\n    }\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'X':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n\n      case 'XXXX':\n      case 'XX':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n\n      case 'XXXXX':\n      case 'XXX': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)\n  x: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Hours and optional minutes\n      case 'x':\n        return formatTimezoneWithOptionalMinutes(timezoneOffset);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n\n      case 'xxxx':\n      case 'xx':\n        // Hours and minutes without `:` delimiter\n        return formatTimezone(timezoneOffset);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n\n      case 'xxxxx':\n      case 'xxx': // Hours and minutes with `:` delimiter\n\n      default:\n        return formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (GMT)\n  O: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'O':\n      case 'OO':\n      case 'OOO':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'OOOO':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Timezone (specific non-location)\n  z: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timezoneOffset = originalDate.getTimezoneOffset();\n\n    switch (token) {\n      // Short\n      case 'z':\n      case 'zz':\n      case 'zzz':\n        return 'GMT' + formatTimezoneShort(timezoneOffset, ':');\n      // Long\n\n      case 'zzzz':\n      default:\n        return 'GMT' + formatTimezone(timezoneOffset, ':');\n    }\n  },\n  // Seconds timestamp\n  t: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = Math.floor(originalDate.getTime() / 1000);\n    return addLeadingZeros(timestamp, token.length);\n  },\n  // Milliseconds timestamp\n  T: function (date, token, _localize, options) {\n    var originalDate = options._originalDate || date;\n    var timestamp = originalDate.getTime();\n    return addLeadingZeros(timestamp, token.length);\n  }\n};\n\nfunction formatTimezoneShort(offset, dirtyDelimiter) {\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = Math.floor(absOffset / 60);\n  var minutes = absOffset % 60;\n\n  if (minutes === 0) {\n    return sign + String(hours);\n  }\n\n  var delimiter = dirtyDelimiter || '';\n  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);\n}\n\nfunction formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {\n  if (offset % 60 === 0) {\n    var sign = offset > 0 ? '-' : '+';\n    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);\n  }\n\n  return formatTimezone(offset, dirtyDelimiter);\n}\n\nfunction formatTimezone(offset, dirtyDelimiter) {\n  var delimiter = dirtyDelimiter || '';\n  var sign = offset > 0 ? '-' : '+';\n  var absOffset = Math.abs(offset);\n  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);\n  var minutes = addLeadingZeros(absOffset % 60, 2);\n  return sign + hours + delimiter + minutes;\n}\n\nexport default formatters;","function dateLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'P':\n      return formatLong.date({\n        width: 'short'\n      });\n\n    case 'PP':\n      return formatLong.date({\n        width: 'medium'\n      });\n\n    case 'PPP':\n      return formatLong.date({\n        width: 'long'\n      });\n\n    case 'PPPP':\n    default:\n      return formatLong.date({\n        width: 'full'\n      });\n  }\n}\n\nfunction timeLongFormatter(pattern, formatLong) {\n  switch (pattern) {\n    case 'p':\n      return formatLong.time({\n        width: 'short'\n      });\n\n    case 'pp':\n      return formatLong.time({\n        width: 'medium'\n      });\n\n    case 'ppp':\n      return formatLong.time({\n        width: 'long'\n      });\n\n    case 'pppp':\n    default:\n      return formatLong.time({\n        width: 'full'\n      });\n  }\n}\n\nfunction dateTimeLongFormatter(pattern, formatLong) {\n  var matchResult = pattern.match(/(P+)(p+)?/);\n  var datePattern = matchResult[1];\n  var timePattern = matchResult[2];\n\n  if (!timePattern) {\n    return dateLongFormatter(pattern, formatLong);\n  }\n\n  var dateTimeFormat;\n\n  switch (datePattern) {\n    case 'P':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'short'\n      });\n      break;\n\n    case 'PP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'medium'\n      });\n      break;\n\n    case 'PPP':\n      dateTimeFormat = formatLong.dateTime({\n        width: 'long'\n      });\n      break;\n\n    case 'PPPP':\n    default:\n      dateTimeFormat = formatLong.dateTime({\n        width: 'full'\n      });\n      break;\n  }\n\n  return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));\n}\n\nvar longFormatters = {\n  p: timeLongFormatter,\n  P: dateTimeLongFormatter\n};\nexport default longFormatters;","var protectedDayOfYearTokens = ['D', 'DD'];\nvar protectedWeekYearTokens = ['YY', 'YYYY'];\nexport function isProtectedDayOfYearToken(token) {\n  return protectedDayOfYearTokens.indexOf(token) !== -1;\n}\nexport function isProtectedWeekYearToken(token) {\n  return protectedWeekYearTokens.indexOf(token) !== -1;\n}\nexport function throwProtectedError(token, format, input) {\n  if (token === 'YYYY') {\n    throw new RangeError(\"Use `yyyy` instead of `YYYY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'YY') {\n    throw new RangeError(\"Use `yy` instead of `YY` (in `\".concat(format, \"`) for formatting years to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'D') {\n    throw new RangeError(\"Use `d` instead of `D` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  } else if (token === 'DD') {\n    throw new RangeError(\"Use `dd` instead of `DD` (in `\".concat(format, \"`) for formatting days of the month to the input `\").concat(input, \"`; see: https://git.io/fxCyr\"));\n  }\n}","import isValid from \"../isValid/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport formatters from \"../_lib/format/formatters/index.js\";\nimport longFormatters from \"../_lib/format/longFormatters/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport { isProtectedDayOfYearToken, isProtectedWeekYearToken, throwProtectedError } from \"../_lib/protectedTokens/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\"; // This RegExp consists of three parts separated by `|`:\n// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token\n//   (one of the certain letters followed by `o`)\n// - (\\w)\\1* matches any sequences of the same letter\n// - '' matches two quote characters in a row\n// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),\n//   except a single quote symbol, which ends the sequence.\n//   Two quote characters do not end the sequence.\n//   If there is no matching single quote\n//   then the sequence will continue until the end of the string.\n// - . matches any single character unmatched by previous parts of the RegExps\n\nvar formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also\n// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`\n\nvar longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;\nvar escapedStringRegExp = /^'([^]*?)'?$/;\nvar doubleQuoteRegExp = /''/g;\nvar unescapedLatinCharacterRegExp = /[a-zA-Z]/;\n/**\n * @name format\n * @category Common Helpers\n * @summary Format the date.\n *\n * @description\n * Return the formatted date string in the given format. The result may vary by locale.\n *\n * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.\n * > See: https://git.io/fxCyr\n *\n * The characters wrapped between two single quotes characters (') are escaped.\n * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.\n * (see the last example)\n *\n * Format of the string is based on Unicode Technical Standard #35:\n * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\n * with a few additions (see note 7 below the table).\n *\n * Accepted patterns:\n * | Unit                            | Pattern | Result examples                   | Notes |\n * |---------------------------------|---------|-----------------------------------|-------|\n * | Era                             | G..GGG  | AD, BC                            |       |\n * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |\n * |                                 | GGGGG   | A, B                              |       |\n * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |\n * |                                 | yy      | 44, 01, 00, 17                    | 5     |\n * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |\n * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |\n * |                                 | yyyyy   | ...                               | 3,5   |\n * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |\n * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |\n * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |\n * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |\n * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |\n * |                                 | YYYYY   | ...                               | 3,5   |\n * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |\n * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |\n * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |\n * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |\n * |                                 | RRRRR   | ...                               | 3,5,7 |\n * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |\n * |                                 | uu      | -43, 01, 1900, 2017               | 5     |\n * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |\n * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |\n * |                                 | uuuuu   | ...                               | 3,5   |\n * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |\n * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | QQ      | 01, 02, 03, 04                    |       |\n * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |\n * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |\n * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |\n * |                                 | qq      | 01, 02, 03, 04                    |       |\n * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |\n * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |\n * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |\n * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |\n * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | MM      | 01, 02, ..., 12                   |       |\n * |                                 | MMM     | Jan, Feb, ..., Dec                |       |\n * |                                 | MMMM    | January, February, ..., December  | 2     |\n * |                                 | MMMMM   | J, F, ..., D                      |       |\n * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |\n * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |\n * |                                 | LL      | 01, 02, ..., 12                   |       |\n * |                                 | LLL     | Jan, Feb, ..., Dec                |       |\n * |                                 | LLLL    | January, February, ..., December  | 2     |\n * |                                 | LLLLL   | J, F, ..., D                      |       |\n * | Local week of year              | w       | 1, 2, ..., 53                     |       |\n * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | ww      | 01, 02, ..., 53                   |       |\n * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |\n * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |\n * |                                 | II      | 01, 02, ..., 53                   | 7     |\n * | Day of month                    | d       | 1, 2, ..., 31                     |       |\n * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |\n * |                                 | dd      | 01, 02, ..., 31                   |       |\n * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |\n * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |\n * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |\n * |                                 | DDD     | 001, 002, ..., 365, 366           |       |\n * |                                 | DDDD    | ...                               | 3     |\n * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |\n * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |\n * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |\n * |                                 | ii      | 01, 02, ..., 07                   | 7     |\n * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |\n * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |\n * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |\n * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |\n * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |\n * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | ee      | 02, 03, ..., 01                   |       |\n * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | eeeee   | M, T, W, T, F, S, S               |       |\n * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |\n * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |\n * |                                 | cc      | 02, 03, ..., 01                   |       |\n * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |\n * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |\n * |                                 | ccccc   | M, T, W, T, F, S, S               |       |\n * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |\n * | AM, PM                          | a..aa   | AM, PM                            |       |\n * |                                 | aaa     | am, pm                            |       |\n * |                                 | aaaa    | a.m., p.m.                        | 2     |\n * |                                 | aaaaa   | a, p                              |       |\n * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |\n * |                                 | bbb     | am, pm, noon, midnight            |       |\n * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |\n * |                                 | bbbbb   | a, p, n, mi                       |       |\n * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |\n * |                                 | BBBB    | at night, in the morning, ...     | 2     |\n * |                                 | BBBBB   | at night, in the morning, ...     |       |\n * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |\n * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |\n * |                                 | hh      | 01, 02, ..., 11, 12               |       |\n * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |\n * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |\n * |                                 | HH      | 00, 01, 02, ..., 23               |       |\n * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |\n * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |\n * |                                 | KK      | 01, 02, ..., 11, 00               |       |\n * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |\n * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |\n * |                                 | kk      | 24, 01, 02, ..., 23               |       |\n * | Minute                          | m       | 0, 1, ..., 59                     |       |\n * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | mm      | 00, 01, ..., 59                   |       |\n * | Second                          | s       | 0, 1, ..., 59                     |       |\n * |                                 | so      | 0th, 1st, ..., 59th               | 7     |\n * |                                 | ss      | 00, 01, ..., 59                   |       |\n * | Fraction of second              | S       | 0, 1, ..., 9                      |       |\n * |                                 | SS      | 00, 01, ..., 99                   |       |\n * |                                 | SSS     | 000, 001, ..., 999                |       |\n * |                                 | SSSS    | ...                               | 3     |\n * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |\n * |                                 | XX      | -0800, +0530, Z                   |       |\n * |                                 | XXX     | -08:00, +05:30, Z                 |       |\n * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |\n * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |\n * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |\n * |                                 | xx      | -0800, +0530, +0000               |       |\n * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |\n * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |\n * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |\n * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |\n * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |\n * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |\n * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |\n * | Seconds timestamp               | t       | 512969520                         | 7     |\n * |                                 | tt      | ...                               | 3,7   |\n * | Milliseconds timestamp          | T       | 512969520900                      | 7     |\n * |                                 | TT      | ...                               | 3,7   |\n * | Long localized date             | P       | 04/29/1453                        | 7     |\n * |                                 | PP      | Apr 29, 1453                      | 7     |\n * |                                 | PPP     | April 29th, 1453                  | 7     |\n * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |\n * | Long localized time             | p       | 12:00 AM                          | 7     |\n * |                                 | pp      | 12:00:00 AM                       | 7     |\n * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |\n * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |\n * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |\n * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |\n * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |\n * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |\n * Notes:\n * 1. \"Formatting\" units (e.g. formatting quarter) in the default en-US locale\n *    are the same as \"stand-alone\" units, but are different in some languages.\n *    \"Formatting\" units are declined according to the rules of the language\n *    in the context of a date. \"Stand-alone\" units are always nominative singular:\n *\n *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`\n *\n *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`\n *\n * 2. Any sequence of the identical letters is a pattern, unless it is escaped by\n *    the single quote characters (see below).\n *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)\n *    the output will be the same as default pattern for this unit, usually\n *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units\n *    are marked with \"2\" in the last column of the table.\n *\n *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`\n *\n *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`\n *\n * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).\n *    The output will be padded with zeros to match the length of the pattern.\n *\n *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`\n *\n * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.\n *    These tokens represent the shortest form of the quarter.\n *\n * 5. The main difference between `y` and `u` patterns are B.C. years:\n *\n *    | Year | `y` | `u` |\n *    |------|-----|-----|\n *    | AC 1 |   1 |   1 |\n *    | BC 1 |   1 |   0 |\n *    | BC 2 |   2 |  -1 |\n *\n *    Also `yy` always returns the last two digits of a year,\n *    while `uu` pads single digit years to 2 characters and returns other years unchanged:\n *\n *    | Year | `yy` | `uu` |\n *    |------|------|------|\n *    | 1    |   01 |   01 |\n *    | 14   |   14 |   14 |\n *    | 376  |   76 |  376 |\n *    | 1453 |   53 | 1453 |\n *\n *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),\n *    except local week-numbering years are dependent on `options.weekStartsOn`\n *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}\n *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).\n *\n * 6. Specific non-location timezones are currently unavailable in `date-fns`,\n *    so right now these tokens fall back to GMT timezones.\n *\n * 7. These patterns are not in the Unicode Technical Standard #35:\n *    - `i`: ISO day of week\n *    - `I`: ISO week of year\n *    - `R`: ISO week-numbering year\n *    - `t`: seconds timestamp\n *    - `T`: milliseconds timestamp\n *    - `o`: ordinal number modifier\n *    - `P`: long localized date\n *    - `p`: long localized time\n *\n * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.\n *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr\n *\n * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.\n *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The second argument is now required for the sake of explicitness.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   format(new Date(2016, 0, 1))\n *\n *   // v2.0.0 onward\n *   format(new Date(2016, 0, 1), \"yyyy-MM-dd'T'HH:mm:ss.SSSxxx\")\n *   ```\n *\n * - New format string API for `format` function\n *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).\n *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.\n *\n * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.\n *\n * @param {Date|Number} date - the original date\n * @param {String} format - the string of tokens\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is\n * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;\n *   see: https://git.io/fxCyr\n * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;\n *   see: https://git.io/fxCyr\n * @returns {String} the formatted date string\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7\n * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr\n * @throws {RangeError} format string contains an unescaped latin alphabet character\n *\n * @example\n * // Represent 11 February 2014 in middle-endian format:\n * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')\n * //=> '02/11/2014'\n *\n * @example\n * // Represent 2 July 2014 in Esperanto:\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = format(new Date(2014, 6, 2), \"do 'de' MMMM yyyy\", {\n *   locale: eoLocale\n * })\n * //=> '2-a de julio 2014'\n *\n * @example\n * // Escape string by single quote characters:\n * var result = format(new Date(2014, 6, 2, 15), \"h 'o''clock'\")\n * //=> \"3 o'clock\"\n */\n\nexport default function format(dirtyDate, dirtyFormatStr, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var formatStr = String(dirtyFormatStr);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n  var localeFirstWeekContainsDate = locale.options && locale.options.firstWeekContainsDate;\n  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);\n  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN\n\n  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {\n    throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');\n  }\n\n  var localeWeekStartsOn = locale.options && locale.options.weekStartsOn;\n  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);\n  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN\n\n  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {\n    throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');\n  }\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  } // Convert the date in system timezone to the same date in UTC+00:00 timezone.\n  // This ensures that when UTC functions will be implemented, locales will be compatible with them.\n  // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376\n\n\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);\n  var utcDate = subMilliseconds(originalDate, timezoneOffset);\n  var formatterOptions = {\n    firstWeekContainsDate: firstWeekContainsDate,\n    weekStartsOn: weekStartsOn,\n    locale: locale,\n    _originalDate: originalDate\n  };\n  var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === 'p' || firstCharacter === 'P') {\n      var longFormatter = longFormatters[firstCharacter];\n      return longFormatter(substring, locale.formatLong, formatterOptions);\n    }\n\n    return substring;\n  }).join('').match(formattingTokensRegExp).map(function (substring) {\n    // Replace two single quote characters with one single quote character\n    if (substring === \"''\") {\n      return \"'\";\n    }\n\n    var firstCharacter = substring[0];\n\n    if (firstCharacter === \"'\") {\n      return cleanEscapedString(substring);\n    }\n\n    var formatter = formatters[firstCharacter];\n\n    if (formatter) {\n      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {\n        throwProtectedError(substring, dirtyFormatStr, dirtyDate);\n      }\n\n      return formatter(utcDate, substring, locale.localize, formatterOptions);\n    }\n\n    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {\n      throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');\n    }\n\n    return substring;\n  }).join('');\n  return result;\n}\n\nfunction cleanEscapedString(input) {\n  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, \"'\");\n}","import assign from \"../assign/index.js\";\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (Object.prototype.hasOwnProperty.call(dirtyObject, property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport compareAsc from \"../compareAsc/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport cloneObject from \"../_lib/cloneObject/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_MINUTE = 1000 * 60;\nvar MINUTES_IN_DAY = 60 * 24;\nvar MINUTES_IN_MONTH = MINUTES_IN_DAY * 30;\nvar MINUTES_IN_YEAR = MINUTES_IN_DAY * 365;\n/**\n * @name formatDistanceStrict\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words, using strict units.\n * This is like `formatDistance`, but does not use helpers like 'almost', 'over',\n * 'less than' and the like.\n *\n * | Distance between dates | Result              |\n * |------------------------|---------------------|\n * | 0 ... 59 secs          | [0..59] seconds     |\n * | 1 ... 59 mins          | [1..59] minutes     |\n * | 1 ... 23 hrs           | [1..23] hours       |\n * | 1 ... 29 days          | [1..29] days        |\n * | 1 ... 11 months        | [1..11] months      |\n * | 1 ... N years          | [1..N]  years       |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWordsStrict` to `formatDistanceStrict`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(2015, 0, 2),\n *     new Date(2014, 6, 2)\n *   ) //=> '6 months'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(2014, 6, 2),\n *     new Date(2015, 0, 2)\n *   ) //=> '6 months'\n *   ```\n *\n * - `partialMethod` option is renamed to `roundingMethod`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { partialMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { roundingMethod: 'ceil' }\n *   ) //=> '2 minutes'\n *   ```\n *\n * - If `roundingMethod` is not specified, it now defaults to `round` instead of `floor`.\n *\n * - `unit` option now accepts one of the strings:\n *   'second', 'minute', 'hour', 'day', 'month' or 'year' instead of 's', 'm', 'h', 'd', 'M' or 'Y'\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWordsStrict(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     { unit: 'm' }\n *   )\n *\n *   // v2.0.0 onward\n *\n *   formatDistanceStrict(\n *     new Date(1986, 3, 4, 10, 33, 1),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { unit: 'minute' }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {'second'|'minute'|'hour'|'day'|'month'|'year'} [options.unit] - if specified, will force a unit\n * @param {'floor'|'ceil'|'round'} [options.roundingMethod='round'] - which way to round partial units\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.roundingMethod` must be 'floor', 'ceil' or 'round'\n * @throws {RangeError} `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00?\n * const result = formatDistanceStrict(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0)\n * )\n * //=> '15 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> '1 year ago'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, in minutes?\n * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {\n *   unit: 'minute'\n * })\n * //=> '525600 minutes'\n *\n * @example\n * // What is the distance from 1 January 2015\n * // to 28 January 2015, in months, rounded up?\n * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {\n *   unit: 'month',\n *   roundingMethod: 'ceil'\n * })\n * //=> '1 month'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> '1 jaro'\n */\n\nexport default function formatDistanceStrict(dirtyDate, dirtyBaseDate) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  requiredArgs(2, arguments);\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain localize.formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var roundingMethod = options.roundingMethod == null ? 'round' : String(options.roundingMethod);\n  var roundingMethodFn;\n\n  if (roundingMethod === 'floor') {\n    roundingMethodFn = Math.floor;\n  } else if (roundingMethod === 'ceil') {\n    roundingMethodFn = Math.ceil;\n  } else if (roundingMethod === 'round') {\n    roundingMethodFn = Math.round;\n  } else {\n    throw new RangeError(\"roundingMethod must be 'floor', 'ceil' or 'round'\");\n  }\n\n  var milliseconds = dateRight.getTime() - dateLeft.getTime();\n  var minutes = milliseconds / MILLISECONDS_IN_MINUTE;\n  var timezoneOffset = getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft); // Use DST-normalized difference in minutes for years, months and days;\n  // use regular difference in minutes for hours, minutes and seconds.\n\n  var dstNormalizedMinutes = (milliseconds - timezoneOffset) / MILLISECONDS_IN_MINUTE;\n  var unit;\n\n  if (options.unit == null) {\n    if (minutes < 1) {\n      unit = 'second';\n    } else if (minutes < 60) {\n      unit = 'minute';\n    } else if (minutes < MINUTES_IN_DAY) {\n      unit = 'hour';\n    } else if (dstNormalizedMinutes < MINUTES_IN_MONTH) {\n      unit = 'day';\n    } else if (dstNormalizedMinutes < MINUTES_IN_YEAR) {\n      unit = 'month';\n    } else {\n      unit = 'year';\n    }\n  } else {\n    unit = String(options.unit);\n  } // 0 up to 60 seconds\n\n\n  if (unit === 'second') {\n    var seconds = roundingMethodFn(milliseconds / 1000);\n    return locale.formatDistance('xSeconds', seconds, localizeOptions); // 1 up to 60 mins\n  } else if (unit === 'minute') {\n    var roundedMinutes = roundingMethodFn(minutes);\n    return locale.formatDistance('xMinutes', roundedMinutes, localizeOptions); // 1 up to 24 hours\n  } else if (unit === 'hour') {\n    var hours = roundingMethodFn(minutes / 60);\n    return locale.formatDistance('xHours', hours, localizeOptions); // 1 up to 30 days\n  } else if (unit === 'day') {\n    var days = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 up to 12 months\n  } else if (unit === 'month') {\n    var months = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_MONTH);\n    return months === 12 && options.unit !== 'month' ? locale.formatDistance('xYears', 1, localizeOptions) : locale.formatDistance('xMonths', months, localizeOptions); // 1 year up to max Date\n  } else if (unit === 'year') {\n    var years = roundingMethodFn(dstNormalizedMinutes / MINUTES_IN_YEAR);\n    return locale.formatDistance('xYears', years, localizeOptions);\n  }\n\n  throw new RangeError(\"unit must be 'second', 'minute', 'hour', 'day', 'month' or 'year'\");\n}","import defaultLocale from \"../locale/en-US/index.js\";\nvar defaultFormat = ['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds'];\n/**\n * @name formatDuration\n * @category Common Helpers\n * @summary Formats a duration in human-readable format\n *\n * @description\n * Return human-readable duration string i.e. \"9 months 2 days\"\n *\n * @param {Duration} duration - the duration to format\n * @param {Object} [options] - an object with options.\n\n * @param {string[]} [options.format=['years', 'months', 'weeks', 'days', 'hours', 'minutes', 'seconds']] - the array of units to format\n * @param {boolean} [options.zero=false] - should be zeros be included in the output?\n * @param {string} [options.delimiter=' '] - delimiter string\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {string} the formatted date string\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Format full duration\n * formatDuration({\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds\n *\n * @example\n * // Format partial duration\n * formatDuration({ months: 9, days: 2 })\n * //=> '9 months 2 days'\n *\n * @example\n * // Customize the format\n * formatDuration(\n *   {\n *     years: 2,\n *     months: 9,\n *     weeks: 1,\n *     days: 7,\n *     hours: 5,\n *     minutes: 9,\n *     seconds: 30\n *   },\n *   { format: ['months', 'weeks'] }\n * ) === '9 months 1 week'\n *\n * @example\n * // Customize the zeros presence\n * formatDuration({ years: 0, months: 9 })\n * //=> '9 months'\n * formatDuration({ years: 0, months: 9 }, { zero: true })\n * //=> '0 years 9 months'\n *\n * @example\n * // Customize the delimiter\n * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })\n * //=> '2 years, 9 months, 3 weeks'\n */\n\nexport default function formatDuration(duration, options) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var format = (options === null || options === void 0 ? void 0 : options.format) || defaultFormat;\n  var locale = (options === null || options === void 0 ? void 0 : options.locale) || defaultLocale;\n  var zero = (options === null || options === void 0 ? void 0 : options.zero) || false;\n  var delimiter = (options === null || options === void 0 ? void 0 : options.delimiter) || ' ';\n  var result = format.reduce(function (acc, unit) {\n    var token = \"x\".concat(unit.replace(/(^.)/, function (m) {\n      return m.toUpperCase();\n    }));\n    var addChunk = typeof duration[unit] === 'number' && (zero || duration[unit]);\n    return addChunk ? acc.concat(locale.formatDistance(token, duration[unit])) : acc;\n  }, []).join(delimiter);\n  return result;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addDays from \"../addDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subDays\n * @category Day Helpers\n * @summary Subtract the specified number of days from the given date.\n *\n * @description\n * Subtract the specified number of days from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the days subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 10 days from 1 September 2014:\n * const result = subDays(new Date(2014, 8, 1), 10)\n * //=> Fri Aug 22 2014 00:00:00\n */\n\nexport default function subDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addDays(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMonths from \"../addMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMonths\n * @category Month Helpers\n * @summary Subtract the specified number of months from the given date.\n *\n * @description\n * Subtract the specified number of months from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 5 months from 1 February 2015:\n * const result = subMonths(new Date(2015, 1, 1), 5)\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function subMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMonths(dirtyDate, -amount);\n}","import subDays from \"../subDays/index.js\";\nimport subMonths from \"../subMonths/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toInteger from \"../_lib/toInteger/index.js\";\n/**\n * @name sub\n * @category Common Helpers\n * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @description\n * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be subtracted\n *\n * | Key     | Description                        |\n * |---------|------------------------------------|\n * | years   | Amount of years to be subtracted   |\n * | months  | Amount of months to be subtracted  |\n * | weeks   | Amount of weeks to be subtracted   |\n * | days    | Amount of days to be subtracted    |\n * | hours   | Amount of hours to be subtracted   |\n * | minutes | Amount of minutes to be subtracted |\n * | seconds | Amount of seconds to be subtracted |\n *\n * All values default to 0\n *\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract the following duration from 15 June 2017 15:29:20\n * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30\n * })\n * //=> Mon Sep 1 2014 10:19:50\n */\n\nexport default function sub(date, duration) {\n  requiredArgs(2, arguments);\n  if (!duration || typeof duration !== 'object') return new Date(NaN);\n  var years = duration.years ? toInteger(duration.years) : 0;\n  var months = duration.months ? toInteger(duration.months) : 0;\n  var weeks = duration.weeks ? toInteger(duration.weeks) : 0;\n  var days = duration.days ? toInteger(duration.days) : 0;\n  var hours = duration.hours ? toInteger(duration.hours) : 0;\n  var minutes = duration.minutes ? toInteger(duration.minutes) : 0;\n  var seconds = duration.seconds ? toInteger(duration.seconds) : 0; // Subtract years and months\n\n  var dateWithoutMonths = subMonths(date, months + years * 12); // Subtract weeks and days\n\n  var dateWithoutDays = subDays(dateWithoutMonths, days + weeks * 7); // Subtract hours, minutes and seconds\n\n  var minutestoSub = minutes + hours * 60;\n  var secondstoSub = seconds + minutestoSub * 60;\n  var mstoSub = secondstoSub * 1000;\n  var finalDate = new Date(dateWithoutDays.getTime() - mstoSub);\n  return finalDate;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n// Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n// 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\nvar daysInYear = 365.2425;\n/**\n * @name milliseconds\n * @category Millisecond Helpers\n * @summary\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * @description\n * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n *\n * One month is a year divided by 12.\n *\n * @param {Duration} duration - the object with years, months, weeks, days, hours, minutes and seconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {number} the milliseconds\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // 1 year in milliseconds\n * milliseconds({ years: 1 })\n * //=> 31556952000\n *\n * // 3 months in milliseconds\n * milliseconds({ months: 3 })\n * //=> 7889238000\n */\n\nexport default function milliseconds(_ref) {\n  var years = _ref.years,\n      months = _ref.months,\n      weeks = _ref.weeks,\n      days = _ref.days,\n      hours = _ref.hours,\n      minutes = _ref.minutes,\n      seconds = _ref.seconds;\n  requiredArgs(1, arguments);\n  var totalDays = 0;\n  if (years) totalDays += years * daysInYear;\n  if (months) totalDays += months * (daysInYear / 12);\n  if (weeks) totalDays += weeks * 7;\n  if (days) totalDays += days;\n  var totalSeconds = totalDays * 24 * 60 * 60;\n  if (hours) totalSeconds += hours * 60 * 60;\n  if (minutes) totalSeconds += minutes * 60;\n  if (seconds) totalSeconds += seconds;\n  return Math.round(totalSeconds * 1000);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addHours from \"../addHours/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subHours\n * @category Hour Helpers\n * @summary Subtract the specified number of hours from the given date.\n *\n * @description\n * Subtract the specified number of hours from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of hours to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the hours subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 2 hours from 11 July 2014 01:00:00:\n * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)\n * //=> Thu Jul 10 2014 23:00:00\n */\n\nexport default function subHours(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addHours(dirtyDate, -amount);\n}","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toInteger;\n\nfunction toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = requiredArgs;\n\nfunction requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}\n\nmodule.exports = exports.default;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getTimezoneOffsetInMilliseconds;\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nfunction getTimezoneOffsetInMilliseconds(date) {\n  var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n  utcDate.setUTCFullYear(date.getFullYear());\n  return date.getTime() - utcDate.getTime();\n}\n\nmodule.exports = exports.default;","import { toDate } from 'date-fns'\r\nimport toInteger from 'date-fns/_lib/toInteger/index'\r\nimport requiredArgs from 'date-fns/_lib/requiredArgs/index'\r\nimport getTimezoneOffsetInMilliseconds from 'date-fns/_lib/getTimezoneOffsetInMilliseconds/index'\r\n\r\nimport { addHours as addHoursOrig,\r\n         addMilliseconds as addMillisecondsOrig,\r\n         addMinutes as addMinutesOrig,\r\n         addSeconds as addSecondsOrig,\r\n         subHours as subHoursOrig,\r\n         subMilliseconds as subMillisecondsOrig,\r\n         subMinutes as subMinutesOrig,\r\n         subSeconds as subSecondsOrig } from 'date-fns'\r\n\r\nexport function addDays(dirtyDate, dirtyAmount) {\r\n    requiredArgs(2, arguments);\r\n    const date = toDate(dirtyDate);\r\n    const amount = toInteger(dirtyAmount);\r\n    if (isNaN(amount)) {\r\n        return new Date(NaN);\r\n    }\r\n    if (!amount) {\r\n        return date;\r\n    }\r\n    date.setUTCDate(date.getUTCDate() + amount);\r\n    return date;\r\n}\r\n\r\nexport let addHours = addHoursOrig;\r\nexport let addMilliseconds = addMillisecondsOrig;\r\nexport let addMinutes = addMinutesOrig;\r\nexport let addSeconds = addSecondsOrig;\r\n\r\nexport function endOfDay(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCHours(23, 59, 59, 999);\r\n    return date;\r\n}\r\n\r\nexport function endOfHour(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCMinutes(59, 59, 999);\r\n    return date;\r\n}\r\n\r\nexport function endOfMinute(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCSeconds(59, 999);\r\n    return date;\r\n}\r\n\r\nexport function endOfSecond(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCMilliseconds(999);\r\n    return date;\r\n}\r\n\r\nexport function getDate(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const dayOfMonth = date.getUTCDate();\r\n    return dayOfMonth;\r\n}\r\n\r\nexport function getDay(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const day = date.getUTCDay();\r\n    return day;\r\n}\r\n\r\nexport function getHours(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const hours = date.getUTCHours();\r\n    return hours;\r\n}\r\n\r\nexport function getMilliseconds(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const milliseconds = date.getUTCMilliseconds();\r\n    return milliseconds;\r\n}\r\n\r\nexport function getMinutes(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const minutes = date.getUTCMinutes();\r\n    return minutes;\r\n}\r\n\r\nexport function getSeconds(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const seconds = date.getUTCSeconds();\r\n    return seconds;\r\n}\r\n\r\nexport function setDate(dirtyDate, dirtyDayOfMonth) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const dayOfMonth = toInteger(dirtyDayOfMonth);\r\n    date.setUTCDate(dayOfMonth);\r\n    return date;\r\n}\r\n\r\nexport function setHours(dirtyDate, dirtyHours) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const hours = toInteger(dirtyHours);\r\n    date.setUTCHours(hours);\r\n    return date;\r\n}\r\n\r\nexport function setMilliseconds(dirtyDate, dirtyMilliseconds) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const milliseconds = toInteger(dirtyMilliseconds);\r\n    date.setUTCMilliseconds(milliseconds);\r\n    return date;\r\n}\r\n\r\nexport function setMinutes(dirtyDate, dirtyMinutes) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const minutes = toInteger(dirtyMinutes);\r\n    date.setUTCMinutes(minutes);\r\n    return date;\r\n}\r\n\r\nexport function setSeconds(dirtyDate, dirtySeconds) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    const seconds = toInteger(dirtySeconds);\r\n    date.setUTCSeconds(seconds);\r\n    return date;\r\n}\r\n\r\nexport function startOfDay(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCHours(0, 0, 0, 0);\r\n    return date;\r\n}\r\n\r\nexport function startOfHour(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCMinutes(0, 0, 0);\r\n    return date;\r\n}\r\n\r\nexport function startOfMinute(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCSeconds(0, 0);\r\n    return date;\r\n}\r\n\r\nexport function startOfSecond(dirtyDate) {\r\n    requiredArgs(1, arguments);\r\n\r\n    const date = toDate(dirtyDate);\r\n    date.setUTCMilliseconds(0);\r\n    return date;\r\n}\r\n\r\nexport function subDays(dirtyDate, dirtyAmount) {\r\n    requiredArgs(2, arguments);\r\n\r\n    const amount = toInteger(dirtyAmount);\r\n    return addDays(dirtyDate, -amount);\r\n}\r\n\r\nexport let subHours = subHoursOrig;\r\nexport let subMilliseconds = subMillisecondsOrig;\r\nexport let subMinutes = subMinutesOrig;\r\nexport let subSeconds = subSecondsOrig;\r\n\r\nfunction toUTCDate(dirtyDate) {\r\n    const date = toDate(dirtyDate);\r\n    // return Date.UTC(date.getUTCFullYear(),\r\n    //                 date.getUTCMonth(),\r\n    //                 date.getUTCDate(),\r\n    //                 date.getUTCHours(),\r\n    //                 date.getUTCMinutes(),\r\n    //                 date.getUTCSeconds(),\r\n    //                 date.getUTCMilliseconds());\r\n    const utcDate = addMillisecondsOrig(date, getTimezoneOffsetInMilliseconds(date));\r\n    return utcDate;\r\n}\r\n\r\nexport { toUTCDate as toDate };\r\n","import toInteger from \"../_lib/toInteger/index.js\";\nimport addMinutes from \"../addMinutes/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subMinutes\n * @category Minute Helpers\n * @summary Subtract the specified number of minutes from the given date.\n *\n * @description\n * Subtract the specified number of minutes from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of minutes to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the minutes subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 minutes from 10 July 2014 12:00:00:\n * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)\n * //=> Thu Jul 10 2014 11:30:00\n */\n\nexport default function subMinutes(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMinutes(dirtyDate, -amount);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport addSeconds from \"../addSeconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name subSeconds\n * @category Second Helpers\n * @summary Subtract the specified number of seconds from the given date.\n *\n * @description\n * Subtract the specified number of seconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of seconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the seconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 30 seconds from 10 July 2014 12:45:00:\n * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:44:30\n */\n\nexport default function subSeconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addSeconds(dirtyDate, -amount);\n}","import { add, areIntervalsOverlapping, sub, toDate } from 'date-fns';\r\n\r\nexport {\r\n    add,\r\n    addMinutes,\r\n    addHours,\r\n    areIntervalsOverlapping,\r\n    compareAsc,\r\n    differenceInMilliseconds,\r\n    differenceInMinutes,\r\n    eachMinuteOfInterval,\r\n    format,\r\n    formatDistanceStrict,\r\n    formatDuration,\r\n    formatISO,\r\n    formatRelative,\r\n    getDayOfYear,\r\n    getHours,\r\n    intervalToDuration,\r\n    isAfter,\r\n    isBefore,\r\n    isEqual,\r\n    isWithinInterval,\r\n    milliseconds,\r\n    setHours,\r\n    startOfHour,\r\n    startOfMinute,\r\n    sub,\r\n    subDays,\r\n    subHours,\r\n    toDate\r\n} from 'date-fns';\r\n\r\nexport { default as defaultLocale } from 'date-fns/locale/en-US';\r\n\r\nexport * as utc from './dateFns/utc/index';\r\n\r\nexport function isSameOrAfter(dirtyDate, dirtyDateToCompare) {\r\n    const date = toDate(dirtyDate);\r\n    const dateToCompare = toDate(dirtyDateToCompare);\r\n    return date.getTime() >= dateToCompare.getTime();\r\n}\r\n\r\nexport function isSameOrBefore(dirtyDate, dirtyDateToCompare) {\r\n    const date = toDate(dirtyDate);\r\n    const dateToCompare = toDate(dirtyDateToCompare);\r\n    return date.getTime() <= dateToCompare.getTime();\r\n}\r\n\r\nexport function intervalAfter(dirtyDate, duration) {\r\n    const date = toDate(dirtyDate);\r\n    return {start: date, end: add(date, duration)};\r\n}\r\n\r\nexport function intervalBefore(dirtyDate, duration) {\r\n    const date = toDate(dirtyDate);\r\n    return {start: sub(date, duration), end: date};\r\n}\r\n\r\n// Based on Luxon's implementatin for durations.\r\n// https://github.com/moment/luxon\r\n\r\nconst LOW_ORDER_MATRIX = {\r\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\r\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\r\n    seconds: { milliseconds: 1000 },\r\n};\r\n\r\nconst ORDERED_UNITS = [\r\n    \"hours\",\r\n    \"minutes\",\r\n    \"seconds\",\r\n    \"milliseconds\",\r\n];\r\n\r\nconst REVERSED_UNITS = ORDERED_UNITS.slice(0).reverse();\r\n\r\nfunction antiTrunc(n) {\r\n    return n < 0 ? Math.floor(n) : Math.ceil(n);\r\n}\r\n\r\nfunction convert(matrix, fromMap, fromUnit, toMap, toUnit) {\r\n    const conv = matrix[toUnit][fromUnit],\r\n          raw = fromMap[fromUnit] / conv,\r\n          sameSign = Math.sign(raw) === Math.sign(toMap[toUnit]),\r\n          added = !sameSign && toMap[toUnit] !== 0 && Math.abs(raw) <= 1 ? antiTrunc(raw) : Math.trunc(raw);\r\n    toMap[toUnit] += added;\r\n    fromMap[fromUnit] -= added * conv;\r\n}\r\n\r\nexport function normalizeDuration(dirtyDuration) {\r\n    const built = {},\r\n          accumulated = {},\r\n          vals = Object.fromEntries(Object.entries(dirtyDuration));\r\n    let lastUnit;\r\n\r\n    for (const k of ORDERED_UNITS) {\r\n        lastUnit = k;\r\n        let own = 0;\r\n\r\n        // Anything we haven't boiled down yet should get boiled into this unit.\r\n        for (const ak in accumulated) {\r\n            own += LOW_ORDER_MATRIX[ak][k] * accumulated[ak];\r\n            accumulated[ak] = 0;\r\n        }\r\n\r\n        // Plus anything that's already in this unit.\r\n        if (typeof(vals[k]) === 'number') {\r\n            own += vals[k];\r\n        }\r\n\r\n        const i = Math.trunc(own);\r\n        built[k] = i;\r\n        accumulated[k] = own - i; // Absorb these fractions into another unit.\r\n\r\n        // Plus anything further down the chain that should be rolled up into this.\r\n        for (const down in vals) {\r\n            if (ORDERED_UNITS.indexOf(down) > ORDERED_UNITS.indexOf(k)) {\r\n                convert(LOW_ORDER_MATRIX, vals, down, built, k);\r\n            }\r\n        }\r\n        // Otherwise, keep it for later.\r\n    }\r\n    // Anything left over becomes the decimal for the last unit.\r\n    for (const key in accumulated) {\r\n        if (accumulated[key] !== 0) {\r\n            built[lastUnit] +=\r\n                key === lastUnit ? accumulated[key] : accumulated[key] / LOW_ORDER_MATRIX[lastUnit][key];\r\n        }\r\n    }\r\n\r\n    // Normalize it.\r\n    REVERSED_UNITS.reduce((prev, curr) => {\r\n        // Check if the input has this unit.\r\n        if (!(typeof(built[curr]) === 'undefined')) {\r\n            if (prev) {\r\n                // Update the duration\r\n                convert(LOW_ORDER_MATRIX, built, prev, built, curr);\r\n            }\r\n            return curr;\r\n        } else {\r\n            return prev;\r\n        }\r\n    }, null);\r\n    return built;\r\n}\r\n\r\n// Using Luxon's implementation for intervals.\r\n// https://github.com/moment/luxon\r\n\r\nexport function doesintervalAbutStart(dirtyInterval, dirtyOtherInterval) {\r\n    const intervalEndTime = toDate(dirtyInterval.end).getTime();\r\n    const otherIntervalStartTime = toDate(dirtyOtherInterval.start).getTime();\r\n    return intervalEndTime === otherIntervalStartTime;\r\n}\r\n\r\nexport function doesIntervalAbutEnd(dirtyInterval, dirtyOtherInterval) {\r\n    const intervalStartTime = toDate(dirtyInterval.start).getTime();\r\n    const otherIntervalEndTime = toDate(dirtyOtherInterval.end).getTime();\r\n    return otherIntervalEndTime === intervalStartTime;\r\n}\r\n\r\nexport function intervalUnion(interval, otherInterval) {\r\n    const intervalStartTime = toDate(interval.start).getTime();\r\n    const intervalEndTime = toDate(interval.end).getTime();\r\n    const otherIntervalStartTime = toDate(otherInterval.start).getTime();\r\n    const otherIntervalEndTime = toDate(otherInterval.end).getTime();\r\n\r\n    const start = intervalStartTime < otherIntervalStartTime ? intervalStartTime : otherIntervalStartTime;\r\n    const end = intervalEndTime > otherIntervalEndTime ? intervalEndTime : otherIntervalEndTime;\r\n    return { start: start, end: end };\r\n}\r\n\r\nexport function intervalIntersection(interval, otherInterval) {\r\n    const intervalStartTime = toDate(interval.start).getTime();\r\n    const intervalEndTime = toDate(interval.end).getTime();\r\n    const otherIntervalStartTime = toDate(otherInterval.start).getTime();\r\n    const otherIntervalEndTime = toDate(otherInterval.end).getTime();\r\n\r\n    const start = intervalStartTime > otherIntervalStartTime ? intervalStartTime : otherIntervalStartTime;\r\n    const end = intervalEndTime < otherIntervalEndTime ? intervalEndTime : otherIntervalEndTime;\r\n\r\n    if (start >= end) {\r\n        return null;\r\n    } else {\r\n        return { start: start, end: end };\r\n    }\r\n}\r\n\r\nexport function intervalMerge(intervals) {\r\n    const [found, final] = intervals\r\n        .sort((a, b) => a.start - b.start)\r\n        .reduce(\r\n            ([sofar, current], item) => {\r\n                if (!current) {\r\n                    return [sofar, item];\r\n                } else if (areIntervalsOverlapping(current, item) || doesintervalAbutStart(current, item)) {\r\n                    return [sofar, intervalUnion(current, item)];\r\n                } else {\r\n                    return [sofar.concat([current]), item];\r\n                }\r\n            },\r\n            [[], null]\r\n        );\r\n    if (final) {\r\n        found.push(final);\r\n    }\r\n    return found;\r\n}\r\n\r\nexport function intervalXor(...intervals) {\r\n    // Using Luxon's implementation for intervals.\r\n    let start = null,\r\n        currentCount = 0;\r\n    const results = [],\r\n          ends = intervals.map((i) => [\r\n              { time: i.start, type: \"s\" },\r\n              { time: i.end, type: \"e\" },\r\n          ]),\r\n          flattened = Array.prototype.concat(...ends),\r\n          arr = flattened.sort((a, b) => a.time - b.time);\r\n\r\n    for (const i of arr) {\r\n        currentCount += i.type === \"s\" ? 1 : -1;\r\n\r\n        if (currentCount === 1) {\r\n            start = i.time;\r\n        } else {\r\n            if (start && +start !== +i.time) {\r\n                results.push({start: start, end: i.time});\r\n            }\r\n\r\n            start = null;\r\n        }\r\n    }\r\n\r\n    return intervalMerge(results);\r\n}","import addMinutes from \"../addMinutes/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport startOfMinute from \"../startOfMinute/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name eachMinuteOfInterval\n * @category Interval Helpers\n * @summary Return the array of minutes within the specified time interval.\n *\n * @description\n * Returns the array of minutes within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link https://date-fns.org/docs/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The starts of minutes from the hour of the interval start to the hour of the interval end\n * @throws {TypeError} 1 argument requie value should be more than 1.\n * @returns {Date[]} the array withred\n * @throws {RangeError} `options.step` must be a number equal or greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03\n * const result = eachMinuteOfInterval({\n *   start: new Date(2014, 9, 14, 13),\n *   end: new Date(2014, 9, 14, 13, 3)\n * })\n * //=> [\n * //   Wed Oct 14 2014 13:00:00,\n * //   Wed Oct 14 2014 13:01:00,\n * //   Wed Oct 14 2014 13:02:00,\n * //   Wed Oct 14 2014 13:03:00\n * // ]\n */\nexport default function eachMinuteOfInterval(interval, options) {\n  requiredArgs(1, arguments);\n  var startDate = startOfMinute(toDate(interval.start));\n  var endDate = startOfMinute(toDate(interval.end));\n  var startTime = startDate.getTime();\n  var endTime = endDate.getTime();\n\n  if (startTime >= endTime) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number equal or greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate = addMinutes(currentDate, step);\n  }\n\n  return dates;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\n/**\n * @name formatISO\n * @category Common Helpers\n * @summary Format the date according to the ISO 8601 standard (http://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).\n *\n * @description\n * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.\n *\n * @param {Date|Number} date - the original date\n * @param {Object} [options] - an object with options.\n * @param {'extended'|'basic'} [options.format='extended'] - if 'basic', hide delimiters between date and time values.\n * @param {'complete'|'date'|'time'} [options.representation='complete'] - format date, time with time zone, or both.\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `options.format` must be 'extended' or 'basic'\n * @throws {RangeError} `options.represenation` must be 'date', 'time' or 'complete'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))\n * //=> '2019-09-18T19:00:52Z'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601, short format (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })\n * //=> '20190918T190052'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, date only:\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })\n * //=> '2019-09-18'\n *\n * @example\n * // Represent 18 September 2019 in ISO 8601 format, time only (UTC):\n * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })\n * //=> '19:00:52Z'\n */\n\nexport default function formatISO(dirtyDate, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 argument required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var options = dirtyOptions || {};\n  var format = options.format == null ? 'extended' : String(options.format);\n  var representation = options.representation == null ? 'complete' : String(options.representation);\n\n  if (format !== 'extended' && format !== 'basic') {\n    throw new RangeError(\"format must be 'extended' or 'basic'\");\n  }\n\n  if (representation !== 'date' && representation !== 'time' && representation !== 'complete') {\n    throw new RangeError(\"representation must be 'date', 'time', or 'complete'\");\n  }\n\n  var result = '';\n  var tzOffset = '';\n  var dateDelimiter = format === 'extended' ? '-' : '';\n  var timeDelimiter = format === 'extended' ? ':' : ''; // Representation is either 'date' or 'complete'\n\n  if (representation !== 'time') {\n    var day = addLeadingZeros(originalDate.getDate(), 2);\n    var month = addLeadingZeros(originalDate.getMonth() + 1, 2);\n    var year = addLeadingZeros(originalDate.getFullYear(), 4); // yyyyMMdd or yyyy-MM-dd.\n\n    result = \"\".concat(year).concat(dateDelimiter).concat(month).concat(dateDelimiter).concat(day);\n  } // Representation is either 'time' or 'complete'\n\n\n  if (representation !== 'date') {\n    // Add the timezone.\n    var offset = originalDate.getTimezoneOffset();\n\n    if (offset !== 0) {\n      var absoluteOffset = Math.abs(offset);\n      var hourOffset = addLeadingZeros(Math.floor(absoluteOffset / 60), 2);\n      var minuteOffset = addLeadingZeros(absoluteOffset % 60, 2); // If less than 0, the sign is +, because it is ahead of time.\n\n      var sign = offset < 0 ? '+' : '-';\n      tzOffset = \"\".concat(sign).concat(hourOffset, \":\").concat(minuteOffset);\n    } else {\n      tzOffset = 'Z';\n    }\n\n    var hour = addLeadingZeros(originalDate.getHours(), 2);\n    var minute = addLeadingZeros(originalDate.getMinutes(), 2);\n    var second = addLeadingZeros(originalDate.getSeconds(), 2); // If there's also date, separate it with time with 'T'\n\n    var separator = result === '' ? '' : 'T'; // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.\n\n    var time = [hour, minute, second].join(timeDelimiter); // HHmmss or HH:mm:ss.\n\n    result = \"\".concat(result).concat(separator).concat(time).concat(tzOffset);\n  }\n\n  return result;\n}","import differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport format from \"../format/index.js\";\nimport defaultLocale from \"../locale/en-US/index.js\";\nimport subMilliseconds from \"../subMilliseconds/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport getTimezoneOffsetInMilliseconds from \"../_lib/getTimezoneOffsetInMilliseconds/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name formatRelative\n * @category Common Helpers\n * @summary Represent the date in words relative to the given base date.\n *\n * @description\n * Represent the date in words relative to the given base date.\n *\n * | Distance to the base date | Result                    |\n * |---------------------------|---------------------------|\n * | Previous 6 days           | last Sunday at 04:30 AM   |\n * | Last day                  | yesterday at 04:30 AM     |\n * | Same day                  | today at 04:30 AM         |\n * | Next day                  | tomorrow at 04:30 AM      |\n * | Next 6 days               | Sunday at 04:30 AM        |\n * | Other                     | 12/31/2017                |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to format\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)\n * @returns {String} the date in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6\n * @throws {RangeError} `options.locale` must contain `localize` property\n * @throws {RangeError} `options.locale` must contain `formatLong` property\n * @throws {RangeError} `options.locale` must contain `formatRelative` property\n *\n * @example\n * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday\n * const result = formatRelative(addDays(new Date(), -6), new Date())\n * //=> \"last Thursday at 12:45 AM\"\n */\nexport default function formatRelative(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var baseDate = toDate(dirtyBaseDate);\n\n  var _ref = dirtyOptions || {},\n      _ref$locale = _ref.locale,\n      locale = _ref$locale === void 0 ? defaultLocale : _ref$locale,\n      _ref$weekStartsOn = _ref.weekStartsOn,\n      weekStartsOn = _ref$weekStartsOn === void 0 ? 0 : _ref$weekStartsOn;\n\n  if (!locale.localize) {\n    throw new RangeError('locale must contain localize property');\n  }\n\n  if (!locale.formatLong) {\n    throw new RangeError('locale must contain formatLong property');\n  }\n\n  if (!locale.formatRelative) {\n    throw new RangeError('locale must contain formatRelative property');\n  }\n\n  var diff = differenceInCalendarDays(date, baseDate);\n\n  if (isNaN(diff)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var token;\n\n  if (diff < -6) {\n    token = 'other';\n  } else if (diff < -1) {\n    token = 'lastWeek';\n  } else if (diff < 0) {\n    token = 'yesterday';\n  } else if (diff < 1) {\n    token = 'today';\n  } else if (diff < 2) {\n    token = 'tomorrow';\n  } else if (diff < 7) {\n    token = 'nextWeek';\n  } else {\n    token = 'other';\n  }\n\n  var utcDate = subMilliseconds(date, getTimezoneOffsetInMilliseconds(date));\n  var utcBaseDate = subMilliseconds(baseDate, getTimezoneOffsetInMilliseconds(baseDate));\n  var formatStr = locale.formatRelative(token, utcDate, utcBaseDate, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n  return format(date, formatStr, {\n    locale: locale,\n    weekStartsOn: weekStartsOn\n  });\n}","import toDate from \"../toDate/index.js\";\nimport startOfYear from \"../startOfYear/index.js\";\nimport differenceInCalendarDays from \"../differenceInCalendarDays/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDayOfYear\n * @category Day Helpers\n * @summary Get the day of the year of the given date.\n *\n * @description\n * Get the day of the year of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the day of year\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the year is 2 July 2014?\n * const result = getDayOfYear(new Date(2014, 6, 2))\n * //=> 183\n */\n\nexport default function getDayOfYear(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var diff = differenceInCalendarDays(date, startOfYear(date));\n  var dayOfYear = diff + 1;\n  return dayOfYear;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getHours\n * @category Hour Helpers\n * @summary Get the hours of the given date.\n *\n * @description\n * Get the hours of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the hours\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the hours of 29 February 2012 11:45:00:\n * const result = getHours(new Date(2012, 1, 29, 11, 45))\n * //=> 11\n */\n\nexport default function getHours(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var hours = date.getHours();\n  return hours;\n}","import compareAsc from \"../compareAsc/index.js\";\nimport differenceInYears from \"../differenceInYears/index.js\";\nimport differenceInMonths from \"../differenceInMonths/index.js\";\nimport differenceInDays from \"../differenceInDays/index.js\";\nimport differenceInHours from \"../differenceInHours/index.js\";\nimport differenceInMinutes from \"../differenceInMinutes/index.js\";\nimport differenceInSeconds from \"../differenceInSeconds/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport sub from \"../sub/index.js\";\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert a interval object to a duration object.\n *\n * @param {Interval} interval - the interval to convert to duration\n *\n * @returns {Duration} The duration Object\n * @throws {TypeError} Requires 2 arguments\n * @throws {RangeError} `start` must not be Invalid Date\n * @throws {RangeError} `end` must not be Invalid Date\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * })\n * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\n\nexport default function intervalToDuration(_ref) {\n  var start = _ref.start,\n      end = _ref.end;\n  requiredArgs(1, arguments);\n  var dateLeft = toDate(start);\n  var dateRight = toDate(end);\n\n  if (!isValid(dateLeft)) {\n    throw new RangeError('Start Date is invalid');\n  }\n\n  if (!isValid(dateRight)) {\n    throw new RangeError('End Date is invalid');\n  }\n\n  var duration = {\n    years: 0,\n    months: 0,\n    days: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  };\n  var sign = compareAsc(dateLeft, dateRight);\n  duration.years = Math.abs(differenceInYears(dateLeft, dateRight));\n  var remainingMonths = sub(dateLeft, {\n    years: sign * duration.years\n  });\n  duration.months = Math.abs(differenceInMonths(remainingMonths, dateRight));\n  var remainingDays = sub(remainingMonths, {\n    months: sign * duration.months\n  });\n  duration.days = Math.abs(differenceInDays(remainingDays, dateRight));\n  var remainingHours = sub(remainingDays, {\n    days: sign * duration.days\n  });\n  duration.hours = Math.abs(differenceInHours(remainingHours, dateRight));\n  var remainingMinutes = sub(remainingHours, {\n    hours: sign * duration.hours\n  });\n  duration.minutes = Math.abs(differenceInMinutes(remainingMinutes, dateRight));\n  var remainingSeconds = sub(remainingMinutes, {\n    minutes: sign * duration.minutes\n  });\n  duration.seconds = Math.abs(differenceInSeconds(remainingSeconds, dateRight));\n  return duration;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isAfter\n * @category Common Helpers\n * @summary Is the first date after the second one?\n *\n * @description\n * Is the first date after the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be after the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is after the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 after 11 February 1987?\n * var result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> true\n */\n\nexport default function isAfter(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() > dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isBefore\n * @category Common Helpers\n * @summary Is the first date before the second one?\n *\n * @description\n * Is the first date before the second one?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date that should be before the other one to return true\n * @param {Date|Number} dateToCompare - the date to compare with\n * @returns {Boolean} the first date is before the second date\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Is 10 July 1989 before 11 February 1987?\n * var result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))\n * //=> false\n */\n\nexport default function isBefore(dirtyDate, dirtyDateToCompare) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var dateToCompare = toDate(dirtyDateToCompare);\n  return date.getTime() < dateToCompare.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isEqual\n * @category Common Helpers\n * @summary Are the given dates equal?\n *\n * @description\n * Are the given dates equal?\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Boolean} the dates are equal\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?\n * var result = isEqual(\n *   new Date(2014, 6, 2, 6, 30, 45, 0),\n *   new Date(2014, 6, 2, 6, 30, 45, 500)\n * )\n * //=> false\n */\n\nexport default function isEqual(dirtyLeftDate, dirtyRightDate) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyLeftDate);\n  var dateRight = toDate(dirtyRightDate);\n  return dateLeft.getTime() === dateRight.getTime();\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n\n/**\n * @name isWithinInterval\n * @category Interval Helpers\n * @summary Is the given date within the interval?\n *\n * @description\n * Is the given date within the interval? (Including start and end.)\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `isWithinRange` to `isWithinInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   isWithinRange(\n *     new Date(2014, 0, 3),\n *     new Date(2014, 0, 1), new Date(2014, 0, 7)\n *   )\n *\n *   // v2.0.0 onward\n *\n *   isWithinInterval(\n *     new Date(2014, 0, 3),\n *     { start: new Date(2014, 0, 1), end: new Date(2014, 0, 7) }\n *   )\n *   ```\n *\n * @param {Date|Number} date - the date to check\n * @param {Interval} interval - the interval to check\n * @returns {Boolean} the date is within the interval\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // For the date within the interval:\n * isWithinInterval(new Date(2014, 0, 3), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> true\n *\n * @example\n * // For the date outside of the interval:\n * isWithinInterval(new Date(2014, 0, 10), {\n *   start: new Date(2014, 0, 1),\n *   end: new Date(2014, 0, 7)\n * })\n * //=> false\n *\n * @example\n * // For date equal to interval start:\n * isWithinInterval(date, { start, end: date }) // => true\n *\n * @example\n * // For date equal to interval end:\n * isWithinInterval(date, { start: date, end }) // => true\n */\nexport default function isWithinInterval(dirtyDate, interval) {\n  requiredArgs(2, arguments);\n  var time = toDate(dirtyDate).getTime();\n  var startTime = toDate(interval.start).getTime();\n  var endTime = toDate(interval.end).getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startTime <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  return time >= startTime && time <= endTime;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * var result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name startOfHour\n * @category Hour Helpers\n * @summary Return the start of an hour for the given date.\n *\n * @description\n * Return the start of an hour for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of an hour\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of an hour for 2 September 2014 11:55:00:\n * const result = startOfHour(new Date(2014, 8, 2, 11, 55))\n * //=> Tue Sep 02 2014 11:00:00\n */\n\nexport default function startOfHour(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setMinutes(0, 0, 0);\n  return date;\n}"],"names":["toInteger","dirtyNumber","NaN","number","Number","isNaN","Math","ceil","floor","requiredArgs","required","args","length","TypeError","toDate","argument","arguments","argStr","Object","prototype","toString","call","Date","getTime","console","warn","Error","stack","addDays","dirtyDate","dirtyAmount","date","amount","setDate","getDate","addMonths","dayOfMonth","endOfDesiredMonth","setMonth","getMonth","daysInMonth","setFullYear","getFullYear","add","duration","years","months","weeks","days","hours","minutes","seconds","dateWithMonths","dateWithDays","minutesToAdd","secondsToAdd","msToAdd","finalDate","addMilliseconds","timestamp","MILLISECONDS_IN_HOUR","addHours","getTimezoneOffsetInMilliseconds","utcDate","UTC","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","startOfDay","setHours","MILLISECONDS_IN_DAY","differenceInCalendarDays","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","timestampRight","round","addMinutes","addSeconds","areIntervalsOverlapping","dirtyIntervalLeft","dirtyIntervalRight","options","undefined","inclusive","intervalLeft","intervalRight","leftStartTime","start","leftEndTime","end","rightStartTime","rightEndTime","RangeError","compareAsc","dateLeft","dateRight","diff","millisecondsInHour","isDate","value","isValid","differenceInCalendarMonths","yearDiff","monthDiff","differenceInCalendarYears","compareLocalAsc","differenceInDays","sign","difference","abs","isLastDayNotFull","result","differenceInMilliseconds","roundingMap","trunc","getRoundingMethod","method","differenceInHours","roundingMethod","differenceInMinutes","endOfDay","endOfMonth","month","isLastDayOfMonth","differenceInMonths","isLastMonthNotFull","differenceInSeconds","differenceInYears","isLastYearNotFull","startOfMinute","setSeconds","startOfYear","cleanDate","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","token","count","tokenValue","replace","addSuffix","comparison","buildFormatLongFn","width","String","defaultWidth","format","formats","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","_date","_baseDate","_options","buildLocalizeFn","dirtyIndex","dirtyOptions","valuesArray","context","formattingValues","defaultFormattingWidth","_defaultWidth","_width","values","argumentCallback","ordinalNumber","rem100","era","narrow","abbreviated","wide","quarter","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","pattern","test","findKey","valueCallback","rest","slice","object","predicate","hasOwnProperty","array","parsePattern","parseInt","parseResult","any","index","code","formatDistance","formatLong","formatRelative","localize","weekStartsOn","firstWeekContainsDate","subMilliseconds","addLeadingZeros","targetLength","output","formatters","y","signedYear","getUTCFullYear","year","M","getUTCMonth","d","getUTCDate","a","dayPeriodEnumValue","getUTCHours","toUpperCase","h","H","m","getUTCMinutes","s","getUTCSeconds","S","numberOfDigits","milliseconds","getUTCMilliseconds","pow","startOfUTCISOWeek","getUTCDay","setUTCDate","setUTCHours","getUTCISOWeekYear","fourthOfJanuaryOfNextYear","startOfNextYear","fourthOfJanuaryOfThisYear","startOfThisYear","startOfUTCISOWeekYear","fourthOfJanuary","MILLISECONDS_IN_WEEK","startOfUTCWeek","locale","localeWeekStartsOn","defaultWeekStartsOn","getUTCWeekYear","localeFirstWeekContainsDate","defaultFirstWeekContainsDate","firstWeekOfNextYear","firstWeekOfThisYear","startOfUTCWeekYear","firstWeek","dayPeriodEnum","G","unit","lightFormatters","Y","signedWeekYear","weekYear","R","u","Q","q","L","w","week","getUTCWeek","I","isoWeek","getUTCISOWeek","D","dayOfYear","setUTCMonth","startOfYearTimestamp","getUTCDayOfYear","E","dayOfWeek","e","localDayOfWeek","c","i","isoDayOfWeek","toLowerCase","b","B","K","k","X","_localize","timezoneOffset","_originalDate","getTimezoneOffset","formatTimezoneWithOptionalMinutes","formatTimezone","x","O","formatTimezoneShort","z","t","originalDate","T","offset","dirtyDelimiter","absOffset","delimiter","dateLongFormatter","timeLongFormatter","longFormatters","p","P","dateTimeFormat","datePattern","timePattern","protectedDayOfYearTokens","protectedWeekYearTokens","isProtectedDayOfYearToken","indexOf","isProtectedWeekYearToken","throwProtectedError","input","concat","formattingTokensRegExp","longFormattingTokensRegExp","escapedStringRegExp","doubleQuoteRegExp","unescapedLatinCharacterRegExp","dirtyFormatStr","formatStr","defaultLocale","formatterOptions","map","substring","firstCharacter","longFormatter","join","cleanEscapedString","formatter","useAdditionalWeekYearTokens","useAdditionalDayOfYearTokens","cloneObject","dirtyObject","target","property","assign","MILLISECONDS_IN_MINUTE","MINUTES_IN_DAY","MINUTES_IN_MONTH","MINUTES_IN_YEAR","defaultFormat","subDays","subMonths","sub","dateWithoutMonths","dateWithoutDays","minutestoSub","secondstoSub","mstoSub","daysInYear","subHours","defineProperty","exports","module","default","addHoursOrig","addMillisecondsOrig","addMinutesOrig","addSecondsOrig","subHoursOrig","subMillisecondsOrig","subMinutes","subSeconds","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","dirtyDayOfMonth","dirtyHours","dirtyMilliseconds","dirtyMinutes","dirtySeconds","LOW_ORDER_MATRIX","ORDERED_UNITS","REVERSED_UNITS","reverse","convert","matrix","fromMap","fromUnit","toMap","toUnit","conv","raw","added","n","doesintervalAbutStart","dirtyInterval","dirtyOtherInterval","intervalUnion","interval","otherInterval","intervalStartTime","intervalEndTime","otherIntervalStartTime","otherIntervalEndTime","intervalMerge","intervals","found","final","sort","reduce","sofar","current","item","push","startDate","endDate","startTime","endTime","dates","currentDate","step","dirtyBaseDate","localizeOptions","Boolean","roundingMethodFn","dstNormalizedMinutes","roundedMinutes","zero","acc","representation","tzOffset","dateDelimiter","timeDelimiter","absoluteOffset","hourOffset","minuteOffset","hour","minute","second","separator","baseDate","_ref","_ref$locale","_ref$weekStartsOn","utcBaseDate","remainingMonths","remainingDays","remainingHours","remainingMinutes","remainingSeconds","currentCount","results","ends","type","arr","dirtyDateToCompare","dateToCompare","dirtyLeftDate","dirtyRightDate","totalDays","totalSeconds","dirtyDuration","built","accumulated","vals","fromEntries","entries","lastUnit","own","ak","down","prev","curr","setMinutes"],"mappings":"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"}